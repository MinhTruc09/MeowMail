import 'dart:convert';
import 'package:flutter/foundation.dart';
import 'package:http/http.dart' as http;
import 'package:mewmail/models/ai/ai_mail_response.dart';
import 'package:mewmail/models/mail/api_response.dart';
import 'package:mewmail/services/auth_service.dart';

class AiService {
  static const String baseUrl = 'https://mailflow-backend-mj3r.onrender.com';

  /// Chat v·ªõi AI ho·∫∑c tr·ª£ l√Ω so·∫°n mail
  /// Mu·ªën so·∫°n mail th√™m t·ª´ kh√≥a: "h√£y gi√∫p t√¥i so·∫°n mail..."
  static Future<ApiResponse<AiMailResponseDto>> generateAiMail({
    required String token,
    required String prompt,
  }) async {
    try {
      debugPrint('ü§ñ G·ª≠i y√™u c·∫ßu AI: prompt=$prompt');
      
      final uri = Uri.parse('$baseUrl/api/ai/generate-ai').replace(
        queryParameters: {
          'prompt': prompt,
        },
      );

      final response = await http.post(
        uri,
        headers: {
          'Authorization': 'Bearer $token',
          'Content-Type': 'application/json',
        },
      ).timeout(const Duration(seconds: 30)); // AI c√≥ th·ªÉ m·∫•t th·ªùi gian

      debugPrint('ü§ñ Ph·∫£n h·ªìi AI: ${response.statusCode} - ${response.body}');

      if (response.statusCode == 200) {
        final json = jsonDecode(response.body);
        if (json['data'] == null) {
          throw Exception('Missing data in AI response');
        }
        return ApiResponse.fromJson(
          json, 
          (data) => AiMailResponseDto.fromJson(data),
        );
      } else if (response.statusCode == 403 || response.statusCode == 401) {
        debugPrint('‚ùå L·ªói x√°c th·ª±c AI: ${response.statusCode} - ${response.body}');
        final newToken = await AuthService.refreshTokenIfNeeded(token);
        if (newToken != null) {
          return await generateAiMail(
            token: newToken,
            prompt: prompt,
          );
        } else {
          throw Exception('Session expired, please log in again');
        }
      } else {
        debugPrint('‚ùå L·ªói AI: ${response.statusCode} - ${response.body}');
        throw Exception('AI service error: ${response.body}');
      }
    } catch (e) {
      debugPrint('‚ùå L·ªói generateAiMail: $e');
      rethrow;
    }
  }

  /// Helper method ƒë·ªÉ ki·ªÉm tra xem prompt c√≥ ph·∫£i l√† y√™u c·∫ßu so·∫°n mail kh√¥ng
  static bool isMailCompositionRequest(String prompt) {
    final lowerPrompt = prompt.toLowerCase();
    return lowerPrompt.contains('so·∫°n mail') ||
           lowerPrompt.contains('vi·∫øt mail') ||
           lowerPrompt.contains('t·∫°o mail') ||
           lowerPrompt.contains('compose mail') ||
           lowerPrompt.contains('write email') ||
           lowerPrompt.contains('create email');
  }

  /// Helper method ƒë·ªÉ t·∫°o prompt cho AI so·∫°n mail
  static String createMailCompositionPrompt({
    required String purpose,
    String? recipient,
    String? context,
  }) {
    String prompt = 'H√£y gi√∫p t√¥i so·∫°n mail $purpose';
    
    if (recipient != null && recipient.isNotEmpty) {
      prompt += ' g·ª≠i cho $recipient';
    }
    
    if (context != null && context.isNotEmpty) {
      prompt += '. B·ªëi c·∫£nh: $context';
    }
    
    return prompt;
  }
}
